// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var TopBarCreate;
    return TopBarCreate = (function(_super) {
      __extends(TopBarCreate, _super);

      function TopBarCreate(options) {
        this.options = options;
        this.buildLink = __bind(this.buildLink, this);
        this.createNode = __bind(this.createNode, this);
        this.assign_properties = __bind(this.assign_properties, this);
        this.addField = __bind(this.addField, this);
        TopBarCreate.__super__.constructor.call(this);
      }

      TopBarCreate.prototype.init = function(instances) {
        _.extend(this, Backbone.Events);
        this.keyListener = instances['KeyListener'];
        this.graphView = instances['GraphView'];
        this.graphModel = instances['GraphModel'];
        this.dataController = instances['local/Neo4jDataController'];
        this.buildingLink = false;
        this.tempLink = {};
        this.sourceSet = false;
        this.render();
        this.selection = instances["NodeSelection"];
        return this.linkSelection = instances["LinkSelection"];
      };

      TopBarCreate.prototype.render = function() {
        var $container, $linkingInstructions,
          _this = this;
        $container = $('<div id="topbarcreate">').appendTo($('#buildbar'));
        "     $nodeSide = $('<div id=\"nodeside\" data-intro=\"Add a Node and connect it to other nodes in the graph\" data-position=\"left\">').appendTo $container\n\n     $nodeHolder = $('<textarea placeholder=\"Add Node\" id=\"nodeHolder\" name=\"textin\" rows=\"1\" cols=\"35\"></textarea>').appendTo $nodeSide\n\n     @$nodeWrapper = $('<div id=\"NodeCreateContainer\">').appendTo $nodeSide\n\n     @$nodeInputName = $('<textarea id=\"NodeCreateName\" placeholder=\"Node Name [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$nodeWrapper\n     @$nodeInputUrl = $('<textarea id=\"NodeCreateUrl\" placeholder=\"Url [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$nodeWrapper\n     @$nodeInputDesc = $('<textarea id=\"NodeCreateDesc\" placeholder=\"Description [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$nodeWrapper\n     #@$nodeInputColor = $('<textarea id=\"NodeCreateColor\" placeholder=\"Color [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$nodeWrapper\n     #@$nodeInputSize = $('<textarea id=\"NodeCreateSize\" placeholder=\"Size [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$nodeWrapper\n\n     $nodeInputForm = $('<form id=\"NodeCreateForm\"></form>').appendTo @$nodeWrapper\n     nodeInputNumber = 0\n\n     $nodeMoreFields = $(\"<input id=\"moreNodeCreateFields\" type=\"button\" value=\"+\">\").appendTo @$nodeWrapper\n     $nodeMoreFields.click(() => \n       @addField(nodeInputNumber, \"NodeCreate\")\n       nodeInputNumber = nodeInputNumber+1\n       )\n\n     $createNodeButton = $('<input id=\"queryform\" type=\"button\" value=\"Create Node\">').appendTo @$nodeWrapper\n\n     $createNodeButton.click(@createNode)\n\n\n     # popout button for more detailed node creation\n     $openPopoutButton = $('<i class=\"right fa fa-expand\"></i>').appendTo @$nodeWrapper\n\n     $openPopoutButton.click () =>\n       @trigger 'popout:open'\n       @$nodeWrapper.hide()\n       $nodeHolder.show()\n\n\n     $linkSide = $('<div id=\"linkside\">').appendTo $container\n\n     $linkHolder = $('<textarea placeholder=\"Add Link\" id=\"linkHolder\" name=\"textin\" rows=\"1\" cols=\"35\"></textarea>').appendTo $linkSide\n\n\n     @$linkWrapper = $('<div id=\"LinkCreateContainer\">').appendTo $linkSide\n\n     @$linkInputName = $('<textarea id=\"LinkCreateName\" placeholder=\"Link Name [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$linkWrapper\n     @$linkInputUrl = $('<textarea id=\"LinkCreateUrl\" placeholder=\"Url [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$linkWrapper\n     @$linkInputDesc = $('<textarea id=\"LinkCreateDesc\" placeholder=\"Description [optional]\" rows=\"1\" cols=\"35\"></textarea><br>').appendTo @$linkWrapper\n\n     $linkInputForm = $('<form id=\"LinkCreateForm\"></form>').appendTo @$linkWrapper\n     linkInputNumber = 0\n\n     $linkMoreFields = $(\"<input id=\"moreLinkCreateFields\" type=\"button\" value=\"+\">\").appendTo @$linkWrapper\n     $linkMoreFields.click(() => \n       @addField(linkInputNumber, \"LinkCreate\")\n       linkInputNumber = linkInputNumber+1\n       )\n\n     @$createLinkButton = $('<input id=\"LinkCreateButton\" type=\"button\" value=\"Attach & Create Link\">').appendTo @$linkWrapper";
        $linkingInstructions = $('<span id="toplink-instructions">').appendTo($container);
        "@$createLinkButton.click () =>\n  if @buildingLink\n    @buildingLink = false\n    @tempLink = {};\n    @sourceSet = false\n    $('#toplink-instructions').replaceWith('<span id=\"toplink-instructions\"></span>')\n    @$createLinkButton.val('Attach & Create Link')\n    @$linkInputName.focus()\n  else\n    @buildLink()\n\n@$nodeWrapper.hide()\n@$linkWrapper.hide()\n\n$nodeHolder.focus () =>\n  @$nodeWrapper.show()\n  @$nodeInputName.focus()\n  $nodeHolder.hide()\n\n$linkHolder.focus () =>\n  @$linkWrapper.show()\n  @$linkInputName.focus()\n  $linkHolder.hide()\n\n@graphView.on \"view:click\", () => \n  if @$nodeWrapper.is(':visible')\n    @$nodeWrapper.hide()\n    $nodeHolder.show()\n  if @$linkWrapper.is(':visible')\n    @$linkWrapper.hide()\n    $linkHolder.show()";
        return this.graphView.on("enter:node:click", function(node) {
          var link;
          if (_this.buildingLink) {
            if (_this.sourceSet) {
              _this.tempLink.target = node;
              link = _this.tempLink;
              _this.dataController.linkAdd(link, function(linkres) {
                var allNodes, n, newLink, _i, _j, _len, _len1;
                newLink = linkres;
                allNodes = _this.graphModel.getNodes();
                for (_i = 0, _len = allNodes.length; _i < _len; _i++) {
                  n = allNodes[_i];
                  if (n['_id'] === link.source['_id']) {
                    newLink.source = n;
                  }
                }
                for (_j = 0, _len1 = allNodes.length; _j < _len1; _j++) {
                  n = allNodes[_j];
                  if (n['_id'] === link.target['_id']) {
                    newLink.target = n;
                  }
                }
                _this.graphModel.putLink(newLink);
                return _this.linkSelection.toggleSelection(newLink);
              });
              _this.sourceSet = _this.buildingLink = false;
              $('.LinkCreateDiv').each(function(i, obj) {
                return $(this)[0].parentNode.removeChild($(this)[0]);
              });
              _this.$linkInputName.val('');
              _this.$linkInputDesc.val('');
              _this.$linkInputUrl.val('');
              $('#toplink-instructions').replaceWith('<span id="toplink-instructions"></span>');
              _this.$createLinkButton.val('Attach & Create Link');
              return _this.$linkInputName.focus();
            } else {
              _this.tempLink.source = node;
              _this.sourceSet = true;
              return $('#toplink-instructions').replaceWith('<span id="toplink-instructions" style="color:black; font-size:20px">Source:' + _this.findHeader(node) + ' (' + node['_id'] + ')<br />Click a node to select it as the link target.</span>');
            }
          }
        });
      };

      TopBarCreate.prototype.update = function(node) {
        return this.selection.getSelectedNodes();
      };

      /*
      Adds a set of property & value input fields to the form /name/, together
      with a button for deleting them
      The inputIndex is a counter that serves as a unique identifier for each
      such set of fields.
      A defaultKey and defaultValue may be specified; these will be used as
      placeholders in the input fields.
      */


      TopBarCreate.prototype.addField = function(inputIndex, name, defaultKey, defaultValue) {
        var $row;
        if (!(defaultKey != null)) {
          defaultKey = "property";
        }
        if (!(defaultValue != null)) {
          defaultValue = "value";
        }
        $row = $("<div id=\"" + name + "Div" + inputIndex + "\" class=\"" + name + "Div\">\n<input style=\"width:80px\" name=\"property" + name + inputIndex + "\" placeholder=\"" + defaultKey + "\" class=\"property" + name + "\">\n<input style=\"width:80px\" name=\"value" + name + inputIndex + "\" placeholder=\"" + defaultValue + "\" class=\"value" + name + "\">\n<input type=\"button\" id=\"remove" + name + inputIndex + "\" value=\"x\" onclick=\"this.parentNode.parentNode.removeChild(this.parentNode);\">\n</div>");
        return $("#" + name + "Form").append($row);
      };

      /*
      Takes the input form /form_name/ and populates a propertyObject with the
      property-value pairs contained in it, checking the property names for
      legality in the process
      Returns: [submitOK, {property1: value1, property2: value2, ...}], where
               /submitOK/ is a boolean indicating whether all property names are
               legal
      */


      TopBarCreate.prototype.assign_properties = function(form_name, is_illegal) {
        var createDate, propertyObject, submitOK;
        if (is_illegal == null) {
          is_illegal = this.dataController.is_illegal;
        }
        submitOK = true;
        propertyObject = {};
        createDate = new Date();
        propertyObject["_Creation_Date"] = createDate;
        if (!($("#" + form_name + "Name").val() === void 0 || $("#" + form_name + "Name").val() === "")) {
          propertyObject["name"] = $("#" + form_name + "Name").val().replace(/'/g, "\\'");
        }
        if (!($("#" + form_name + "Desc").val() === void 0 || $("#" + form_name + "Desc").val() === "")) {
          propertyObject["description"] = $("#" + form_name + "Desc").val().replace(/'/g, "\\'");
        }
        if (!($("#" + form_name + "Url").val() === void 0 || $("#" + form_name + "Url").val() === "")) {
          propertyObject["url"] = $("#" + form_name + "Url").val().replace(/'/g, "\\'");
        }
        $("." + form_name + "Div").each(function(i, obj) {
          var property, value;
          property = $(this).children(".property" + form_name).val();
          value = $(this).children(".value" + form_name).val();
          if (is_illegal(property, "Property")) {
            alert("Property '" + property + "' is not allowed.");
            return submitOK = false;
          } else if (property in propertyObject) {
            alert("Property '" + property + "' already assigned.\nFirst value: " + propertyObject[property] + "\nSecond value: " + value);
            return submitOK = false;
          } else {
            return propertyObject[property] = value.replace(/'/g, "\\'");
          }
        });
        return [submitOK, propertyObject];
      };

      /*
      Creates a node using the information in @$nodeInputName, @$nodeInputDesc,
      and NodeCreateDiv; resets the input forms if creation is successful
      */


      TopBarCreate.prototype.createNode = function() {
        var nodeObject,
          _this = this;
        nodeObject = this.assign_properties("NodeCreate");
        if (nodeObject[0] && (_.size(nodeObject[1]) > 1 || confirm("The node you are creating has no information associated with it. Do you really want to proceed?"))) {
          $('.NodeCreateDiv').each(function(i, obj) {
            return $(this)[0].parentNode.removeChild($(this)[0]);
          });
          this.$nodeInputName.val('');
          this.$nodeInputDesc.val('');
          this.$nodeInputUrl.val('');
          this.$nodeInputName.focus();
          return this.dataController.nodeAdd(nodeObject[1], function(datum) {
            datum.fixed = true;
            datum.px = ($(window).width() / 2 - _this.graphView.currentTranslation[0]) / _this.graphView.currentScale;
            datum.py = ($(window).height() / 2 - _this.graphView.currentTranslation[1]) / _this.graphView.currentScale;
            _this.graphModel.putNode(datum);
            return _this.selection.toggleSelection(datum);
          });
        }
      };

      /*
      */


      TopBarCreate.prototype.buildLink = function() {
        var linkProperties;
        console.log("Building Link");
        linkProperties = this.assign_properties("LinkCreate");
        if (linkProperties[0]) {
          this.tempLink["properties"] = linkProperties[1];
          this.buildingLink = true;
          $('#toplink-instructions').replaceWith('<span id="toplink-instructions" style="color:black; font-size:20px">Click a node to select it as the link source.</span>');
          return this.$createLinkButton.val('Cancel Link Creation');
        }
      };

      /*
      To Do: replace this with a "to string" method for nodes
      */


      TopBarCreate.prototype.findHeader = function(node) {
        if (node.name != null) {
          return node.name;
        } else if (node.title != null) {
          return node.title;
        } else {
          return '';
        }
      };

      return TopBarCreate;

    })(Backbone.View);
  });

}).call(this);
