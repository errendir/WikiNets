// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var TopBarCreate;
    return TopBarCreate = (function(_super) {
      __extends(TopBarCreate, _super);

      function TopBarCreate(options) {
        this.options = options;
        this.buildLink = __bind(this.buildLink, this);
        this.createNode = __bind(this.createNode, this);
        this.sanitize = __bind(this.sanitize, this);
        TopBarCreate.__super__.constructor.call(this);
      }

      TopBarCreate.prototype.init = function(instances) {
        _.extend(this, Backbone.Events);
        this.keyListener = instances['KeyListener'];
        this.graphView = instances['GraphView'];
        this.graphModel = instances['GraphModel'];
        this.dataController = instances['local/Neo4jDataController'];
        this.selection = instances["NodeSelection"];
        this.linkSelection = instances["LinkSelection"];
        this.buildingLink = false;
        this.tempLink = {};
        return this.render();
      };

      TopBarCreate.prototype.render = function() {
        var container, createNodeButton, linkHolder, linkInputDesc, linkInputName, linkInputUrl, linkSide, linkWrapper, linkingInstructions, nodeHolder, nodeInputDesc, nodeInputName, nodeInputUrl, nodeSide, nodeWrapper, openPopoutButton,
          _this = this;
        container = $('<div id="topbarcreate">').appendTo($('#buildbar'));
        nodeSide = $('<div id="nodeside">').appendTo(container);
        nodeHolder = $('<textarea placeholder="Add Node" id="nodeHolder" name="textin" rows="1" cols="35">').appendTo(nodeSide);
        nodeWrapper = $('<div class="small-form">').appendTo(nodeSide).hide();
        nodeInputName = $('<input type="text" placeholder=\"Node Name [optional]\">').appendTo(nodeWrapper);
        nodeInputUrl = $('<input type="text" placeholder="Url [optional]">').appendTo(nodeWrapper);
        nodeInputDesc = $('<textarea placeholder="Description [optional]" rows="1" cols="35"></textarea>').appendTo(nodeWrapper);
        nodeHolder.focus(function() {
          nodeWrapper.show();
          nodeInputName.focus();
          return nodeHolder.hide();
        });
        createNodeButton = $('<input type="button" value="Create Node">').appendTo(nodeWrapper).click(function() {
          return _this.createNode(nodeInputName.val(), nodeInputUrl.val(), nodeInputDesc.val(), function() {
            nodeInputName.val('');
            nodeInputDesc.val('');
            return nodeInputUrl.val('');
          });
        });
        openPopoutButton = $('<i class="right fa fa-expand"></i>').appendTo(nodeWrapper);
        openPopoutButton.click(function() {
          _this.trigger('popout:open');
          nodeWrapper.hide();
          return nodeHolder.show();
        });
        linkSide = $('<div id="linkside">').appendTo(container);
        linkHolder = $('<input type="text" placeholder="Add Link" id="linkHolder">').appendTo(linkSide);
        linkWrapper = $('<div class="small-form">').appendTo(linkSide).hide();
        linkInputName = $('<input type="text" placeholder="Link Name [optional]">').appendTo(linkWrapper);
        linkInputUrl = $('<input type="text"  placeholder="Url [optional]" >').appendTo(linkWrapper);
        linkInputDesc = $('<textarea placeholder="Description [optional]" rows="1" cols="35">').appendTo(linkWrapper);
        this.createLinkButton = $('<input type="button" value="Attach & Create Link">').appendTo(linkWrapper);
        this.cancelLinkButton = $('<input type="button" value="Cancel Link Creation">').appendTo(linkWrapper).hide();
        this.cancelLinkButton.click(function() {
          _this.cancelLinkButton.hide();
          _this.createLinkButton.show();
          _this.buildingLink = false;
          _this.tempLink = {};
          _this.sourceSet = false;
          return $('#toplink-instructions').text('');
        });
        linkingInstructions = $('<span id="toplink-instructions">').appendTo(container);
        this.createLinkButton.click(function() {
          return _this.buildLink(linkInputName.val(), linkInputUrl.val(), linkInputDesc.val());
        });
        linkHolder.focus(function() {
          linkWrapper.show();
          linkInputName.focus();
          return linkHolder.hide();
        });
        return this.graphView.on("enter:node:click", function(node) {
          var link;
          if (_this.buildingLink) {
            if (!!_this.tempLink['source']) {
              _this.tempLink['target'] = node;
              link = _this.tempLink;
              _this.dataController.linkAdd(link, function(linkres) {
                var allNodes, n, _i, _j, _len, _len1;
                allNodes = _this.graphModel.getNodes();
                for (_i = 0, _len = allNodes.length; _i < _len; _i++) {
                  n = allNodes[_i];
                  if (n['_id'] === link.source['_id']) {
                    linkres.source = n;
                  }
                }
                for (_j = 0, _len1 = allNodes.length; _j < _len1; _j++) {
                  n = allNodes[_j];
                  if (n['_id'] === link.target['_id']) {
                    linkres.target = n;
                  }
                }
                _this.graphModel.putLink(linkres);
                return _this.linkSelection.toggleSelection(linkres);
              });
              _this.buildingLink = false;
              _this.tempLink = {};
              linkInputName.val('');
              linkInputDesc.val('');
              linkInputUrl.val('');
              _this.createLinkButton.show();
              _this.cancelLinkButton.hide();
              return $('#toplink-instructions').text('');
            } else {
              _this.tempLink['source'] = node;
              return $('#toplink-instructions').text("Source: " + node.name + " (" + node['_id'] + ") Click a node to select it as the link target.");
            }
          }
        });
      };

      TopBarCreate.prototype.sanitize = function(propertyVal) {
        return propertyVal.replace(/'/g, "\\'");
      };

      TopBarCreate.prototype.createNode = function(name, url, description, onSuccess) {
        var i, properties, val, _i, _len,
          _this = this;
        if (name == null) {
          name = '';
        }
        if (url == null) {
          url = '';
        }
        if (description == null) {
          description = '';
        }
        properties = {
          'name': name,
          'url': url,
          'description': description,
          '_Creation_Date': new Date()
        };
        for (i = _i = 0, _len = properties.length; _i < _len; i = ++_i) {
          val = properties[i];
          properties[i] = sanitize(val);
        }
        if (!name) {
          return alert("Your node does not have a name! Please assign your node a name.");
        } else {
          this.dataController.nodeAdd(properties, function(datum) {
            datum.fixed = true;
            datum.px = ($(window).width() / 2 - _this.graphView.currentTranslation[0]) / _this.graphView.currentScale;
            datum.py = ($(window).height() / 2 - _this.graphView.currentTranslation[1]) / _this.graphView.currentScale;
            _this.graphModel.putNode(datum);
            return _this.selection.toggleSelection(datum);
          });
          return onSuccess();
        }
      };

      TopBarCreate.prototype.buildLink = function(name, url, description) {
        var i, properties, val, _i, _len;
        if (name == null) {
          name = '';
        }
        if (url == null) {
          url = '';
        }
        if (description == null) {
          description = '';
        }
        properties = {
          'name': name,
          'url': url,
          'description': description,
          '_Creation_Date': new Date()
        };
        for (i = _i = 0, _len = properties.length; _i < _len; i = ++_i) {
          val = properties[i];
          properties[i] = sanitize(val);
        }
        this.tempLink["properties"] = properties;
        this.buildingLink = true;
        $('#toplink-instructions').text('Click a node to select it as the link source.');
        this.createLinkButton.hide();
        return this.cancelLinkButton.show();
      };

      return TopBarCreate;

    })(Backbone.View);
  });

}).call(this);
